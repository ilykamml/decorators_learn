'''
Декораторы функций - это простой способ модификации поведения любой функции без внесения изменения в её код.
Декораторы позволяют вам выполнить произвольный код до/после/вместо вызова функции, модифицируя её входные аргументы,
результат выполнения и добавляя различные сайд-эффекты
'''
from functools import wraps

'''
Декоратор - это функция, принимающая на вход функцию, и возвращающая (другую) функцию
'''


def decorator(          # это функция
        call            # принимает на вход функцию
):
    @wraps(call)
    def wrapper(*args, **kwargs):
        # код оригинальной функции
        r = call(*args, **kwargs)
        # код после оригинальной функции
        return r
    return wrapper  # возвращает другую функцию


'''
Этот декоратор принимает любые входящие аргументы и передаёт их в задекорированную функцию
Процесс декорирования выглядит просто как вызов функции декоратора:
'''


@decorator  # оригинальная функция call заменяется функцией wrapper и больше нельзя получить доступ к call в
# глобальной видимости; в декоратор передаётся ровно один аргумент - декорируемая функция.
# Также стоит декорировать wrapper с помощью functools.wrapper, с помощью него сохраняется метаинформация
def call(a: int) -> str:
    return str(a)


if __name__ == '__main__':
    # decorated_call = decorator(call)
    # assert decorated_call(1) == '1'
    assert call(1) == '1'

