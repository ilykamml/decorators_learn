from functools import wraps


def decorator_wrapper(arg1, arg2):
    def real_decorator(func):  # объявляем декоратор
        @wraps(func)
        def wrapper(*args, **kwargs):
            return func(*args, **kwargs)
        return wrapper
    return real_decorator  # возвращаем декоратор


@decorator_wrapper(1, 2)
def func():
    ...


'''
Так как декоратор в этом случае - замыкание, то имеется доступ к arg1 и arg2 на любом уровне вложенности

Процесс декорирования происходит на этапе первого прохождения интерпретатором Python вашего кода
То есть в процессе вызова функции во всех сценариях декорирования будет выполнен только код, находящийся внутри wrapper

Сам же код декоратора будет выполнен сразу при старте вашего приложения, как только интерпретатор дойдёт до строки
@decorator. Именно поэтому все декораторы должны быть объявлены как синхронные функции. Даже если они являются
декораторами для асинхронных функций (в таком случае асинхронным будет враппер)
'''
